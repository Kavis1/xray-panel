"""
Telegram –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞–Ω–µ–ª—å—é (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π)
"""
import asyncio
from typing import Optional
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters
)
from app.core.config import settings
from sqlalchemy import select
from app.db.base import async_session_maker
from app.models.user import User
from app.models.node import Node


class TelegramBot:
    """Telegram –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞–Ω–µ–ª—å—é"""
    
    def __init__(self):
        self.token = settings.TELEGRAM_BOT_TOKEN
        self.admin_ids = settings.TELEGRAM_ADMIN_IDS
        self.enabled = bool(self.token)
        self.app: Optional[Application] = None
    
    def is_admin(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º"""
        return user_id in self.admin_ids
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        user = update.effective_user
        
        if not self.is_admin(user.id):
            await update.message.reply_text(
                "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –≠—Ç–æ—Ç –±–æ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤."
            )
            return
        
        keyboard = [
            [
                InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="users"),
                InlineKeyboardButton("üñ• –ù–æ–¥—ã", callback_data="nodes")
            ],
            [
                InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats"),
                InlineKeyboardButton("‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞", callback_data="help")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}!\n\n"
            f"üéõ –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Xray\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )
    
    async def users_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /users - —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        query = update.callback_query
        
        if query:
            await query.answer()
            message = query.message
        else:
            message = update.message
        
        if not self.is_admin(update.effective_user.id):
            await message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
            return
        
        async with async_session_maker() as session:
            result = await session.execute(
                select(User).limit(10)
            )
            users = result.scalars().all()
            
            if not users:
                await message.reply_text("üì≠ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return
            
            text = "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n\n"
            for user in users:
                status_emoji = {
                    "ACTIVE": "‚úÖ",
                    "DISABLED": "‚õî",
                    "LIMITED": "‚ö†Ô∏è",
                    "EXPIRED": "‚ùå"
                }.get(user.status, "‚ùì")
                
                traffic_gb = user.traffic_used_bytes / 1024 / 1024 / 1024
                text += f"{status_emoji} {user.username}\n"
                text += f"   –¢—Ä–∞—Ñ–∏–∫: {traffic_gb:.2f} GB\n\n"
            
            keyboard = [
                [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="users")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await message.reply_text(text, reply_markup=reply_markup)
    
    async def nodes_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /nodes - —Å–ø–∏—Å–æ–∫ –Ω–æ–¥"""
        query = update.callback_query
        
        if query:
            await query.answer()
            message = query.message
        else:
            message = update.message
        
        if not self.is_admin(update.effective_user.id):
            await message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
            return
        
        async with async_session_maker() as session:
            result = await session.execute(select(Node))
            nodes = result.scalars().all()
            
            if not nodes:
                await message.reply_text("üì≠ –ù–æ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return
            
            text = "üñ• –ù–æ–¥—ã:\n\n"
            for node in nodes:
                status_emoji = "‚úÖ" if node.is_connected else "‚ùå"
                xray_emoji = "üü¢" if node.xray_running else "üî¥"
                
                text += f"{status_emoji} {node.name}\n"
                text += f"   –ê–¥—Ä–µ—Å: {node.address}:{node.api_port}\n"
                text += f"   Xray: {xray_emoji}\n\n"
            
            keyboard = [
                [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="nodes")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await message.reply_text(text, reply_markup=reply_markup)
    
    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
        query = update.callback_query
        
        if query:
            await query.answer()
            message = query.message
        else:
            message = update.message
        
        if not self.is_admin(update.effective_user.id):
            await message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
            return
        
        async with async_session_maker() as session:
            # –ü–æ–¥—Å—á—ë—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            result = await session.execute(select(User))
            users = result.scalars().all()
            
            total_users = len(users)
            active_users = len([u for u in users if u.status == "ACTIVE"])
            
            # –ü–æ–¥—Å—á—ë—Ç –Ω–æ–¥
            result = await session.execute(select(Node))
            nodes = result.scalars().all()
            
            total_nodes = len(nodes)
            active_nodes = len([n for n in nodes if n.is_connected])
            
            # –ü–æ–¥—Å—á—ë—Ç —Ç—Ä–∞—Ñ–∏–∫–∞
            total_traffic = sum(u.traffic_used_bytes for u in users)
            total_traffic_gb = total_traffic / 1024 / 1024 / 1024
            
            text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
            text += f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {active_users}/{total_users}\n"
            text += f"üñ• –ù–æ–¥—ã: {active_nodes}/{total_nodes}\n"
            text += f"üì∂ –¢—Ä–∞—Ñ–∏–∫: {total_traffic_gb:.2f} GB\n"
            
            keyboard = [
                [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="stats")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await message.reply_text(text, reply_markup=reply_markup)
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /help - —Å–ø—Ä–∞–≤–∫–∞"""
        query = update.callback_query
        
        if query:
            await query.answer()
            message = query.message
        else:
            message = update.message
        
        text = (
            "‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:\n\n"
            "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
            "/users - –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
            "/nodes - –°–ø–∏—Å–æ–∫ –Ω–æ–¥\n"
            "/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
            "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
        )
        
        await message.reply_text(text)
    
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        
        callbacks = {
            "users": self.users_command,
            "nodes": self.nodes_command,
            "stats": self.stats_command,
            "help": self.help_command
        }
        
        handler = callbacks.get(query.data)
        if handler:
            await handler(update, context)
    
    async def setup(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞"""
        if not self.enabled:
            return None
        
        self.app = Application.builder().token(self.token).build()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self.app.add_handler(CommandHandler("start", self.start))
        self.app.add_handler(CommandHandler("users", self.users_command))
        self.app.add_handler(CommandHandler("nodes", self.nodes_command))
        self.app.add_handler(CommandHandler("stats", self.stats_command))
        self.app.add_handler(CommandHandler("help", self.help_command))
        self.app.add_handler(CallbackQueryHandler(self.button_callback))
        
        return self.app
    
    async def start_polling(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        if not self.enabled:
            print("Telegram –±–æ—Ç –æ—Ç–∫–ª—é—á—ë–Ω (TELEGRAM_BOT_TOKEN –Ω–µ —É–∫–∞–∑–∞–Ω)")
            return
        
        await self.setup()
        print(f"Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        await self.app.run_polling()
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        if self.app:
            await self.app.stop()


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
telegram_bot = TelegramBot()


async def send_notification(message: str, user_id: Optional[int] = None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram"""
    if not telegram_bot.enabled:
        return
    
    try:
        if user_id:
            recipients = [user_id]
        else:
            recipients = telegram_bot.admin_ids
        
        if telegram_bot.app:
            for recipient in recipients:
                await telegram_bot.app.bot.send_message(
                    chat_id=recipient,
                    text=message,
                    parse_mode="HTML"
                )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
