version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: xray-panel-db
    environment:
      POSTGRES_USER: panel
      POSTGRES_PASSWORD: panel_password
      POSTGRES_DB: panel
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U panel"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - panel-network

  # Redis for caching and queues
  redis:
    image: redis:7-alpine
    container_name: xray-panel-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - panel-network

  # Backend API
  backend:
    build:
      context: ../backend
      dockerfile: Dockerfile
    container_name: xray-panel-backend
    environment:
      DATABASE_URL: postgresql+asyncpg://panel:panel_password@postgres:5432/panel
      REDIS_URL: redis://redis:6379/0
      SECRET_KEY: ${SECRET_KEY:-change-this-secret-key-to-something-secure}
      CORS_ORIGINS: '["http://localhost:3000","http://localhost"]'
      DOCS_ENABLED: "true"
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ../backend:/app
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    networks:
      - panel-network

  # Celery Worker
  worker:
    build:
      context: ../backend
      dockerfile: Dockerfile
    container_name: xray-panel-worker
    environment:
      DATABASE_URL: postgresql+asyncpg://panel:panel_password@postgres:5432/panel
      REDIS_URL: redis://redis:6379/0
      CELERY_BROKER_URL: redis://redis:6379/1
      CELERY_RESULT_BACKEND: redis://redis:6379/2
      SECRET_KEY: ${SECRET_KEY:-change-this-secret-key-to-something-secure}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ../backend:/app
    command: celery -A app.workers.celery worker --loglevel=info
    networks:
      - panel-network

  # Frontend
  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile
    container_name: xray-panel-frontend
    environment:
      VITE_API_URL: http://localhost:8000
    ports:
      - "3000:3000"
    depends_on:
      - backend
    volumes:
      - ../frontend:/app
      - /app/node_modules
    command: npm run dev -- --host
    networks:
      - panel-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: xray-panel-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
      - frontend
    networks:
      - panel-network

volumes:
  postgres_data:
  redis_data:

networks:
  panel-network:
    driver: bridge
